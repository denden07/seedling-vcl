let contactMobileFields={inputTel:document.getElementById("mobile-phone"),phone_number:document.getElementById("mobile_phone_number"),country_code:document.getElementById("mobile_phone_country_code")},addressForm={deletBtn:document.getElementById("deleteAddressBtn-main"),deleteBtnTrigger:document.getElementById("deleteAddressBtn2"),saveAddressBtn:document.querySelectorAll(".save-address-btn")},customerProfileForm={updateProfileBtn:document.getElementsByClassName("submit-btn"),updatePasswordBtn:document.getElementById("save-password-btn")},tmpUserPayload={first_name:"",last_name:"",email:""},addCardBtn=document.querySelectorAll(".add-credit-card"),cardModal=document.getElementById("stripe-modal");var orderListTable=document.getElementById("order-list-table");let pageBaseUrl="",orderListFilter={page:"1",per_page:"10",sort_by:""},UserProfileScript={methods:{pricify:number=>number.toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:2}),disableFormButtons(formElem,state=!0){let buttons;formElem.querySelectorAll("ins-button").forEach(btn=>btn.disabled=state)},validateTelField(){let isTel=/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$/g,telFields;document.querySelectorAll("[field='tel']").forEach(field=>{field.required?field.value&&!0===isTel.test(field.value)?field.hasError=!1:field.hasError=!0:""===field.value.trim()?field.hasError=!1:field.hasError=1==!isTel.test(field.value)})},validatePasswordField(field){field.value?field.value.length>=6?field.hasError=!1:(field.hasError=!0,field.errorMessage="Minimum of 6 characters"):(field.hasError=!0,field.errorMessage="Password is required")},validatePasswordConfirm(field){let passFields=document.getElementById("password");passFields&&(passFields.value===field.value?field.hasError=!1:(field.hasError=!0,field.errorMessage="Password doesn't match"))},async validationForm(containerEl){for(let index=0;index<containerEl.querySelectorAll("[validate]").length;index++){let field=containerEl.querySelectorAll("[validate]")[index],type;switch(field.tagName.toLowerCase()){case"div":App.validation.validateRadio(field);break;case"ins-input-file":App.validation.validateFile(field);break;case"ins-textarea":App.validation.validateInput(field.querySelector("textarea"));break;case"ins-input":default:"password"===field.field?"password_confirmation"===field.id?this.validatePasswordConfirm(field):this.validatePasswordField(field):"email"===field.field?App.validation.validateEmail(field):App.validation.validateInput(field)}}return App.validation.checkInvalidFields(containerEl)},async validateForm(event){event&&event.preventDefault();let formId=event.target.id,formElem=document.getElementById(formId);if("user-profile-form"==formId||"user-company-form"==formId)this.validateTelField(),await App.validation.validateForm(formElem)&&(this.disableFormButtons(formElem),customerProfileForm.updateProfileBtn.loading=!0,formElem.submit());else if("user-password-form"==formId){if(await this.validationForm(formElem)){const customIcon='<i class="icon-alert-circle"></i>';let confirm=await Swal.fire({title:customIcon+"Change Password?",html:"You will be logged out after changing your password.",confirmButtonText:"Submit",showCancelButton:!0,cancelButtonText:"Cancel",allowOutsideClick:!1,customClass:"swal-user-account"}).then(async result=>{result.isConfirmed&&(this.disableFormButtons(formElem),customerProfileForm.updatePasswordBtn.loading=!0,formElem.submit())})}}else await App.validation.validateForm(formElem)&&formElem.submit()},checkCardCount(){let cards;0===cardFields.querySelectorAll(".card-options").length?noCardNotif.classList.remove("hide"):noCardNotif.classList.add("hide")},initBaseURL(){pageBaseUrl=window.location.pathname},initOrderTableContents(){orderListTable.tableHeaders=tableHeaders;let tableData=tableContent.results.map(data=>{let props=data,shippingArray=[];props.shipping_address_1&&shippingArray.push(props.shipping_address_1),props.shipping_address_2&&shippingArray.push(props.shipping_address_2),props.shipping_city&&shippingArray.push(props.shipping_city),props.shipping_state&&shippingArray.push(props.shipping_state),props.shipping_postcode&&shippingArray.push(props.shipping_postcode),props.shipping_country&&shippingArray.push(props.shipping_country);let fullAddress=shippingArray.join(", "),tmpDate=new Date(props.date_time),formattedDate=tmpDate.getFullYear()+"-"+(tmpDate.getMonth()+1)+"-"+tmpDate.getDate();return{id:data.id,"Order Number":data.id,Items:data.cart.length,"Total Price":this.pricify(props.total_amount/100),"Shipping Address":fullAddress,"Date Ordered":formattedDate,Status:props.order_status}});orderListTable.tableData=tableData,orderListTable.addEventListener("insTableRowAction",event=>{window.location.href="/order-history/"+event.detail.data.id})},initOrderFilterValues(){let query,vars=window.location.search.substring(1).split("&");for(var i=0;i<vars.length;i++){let pair=vars[i].split("=");orderListFilter[pair[0]]=pair[1]}UserProfileScript.methods.putOrderFilterValues()},putOrderFilterValues(){orderListTable&&(orderListTable.pageSize=orderListFilter.per_page,orderListTable.pageNumber=orderListFilter.page,maxCount&&(orderListTable.totalCount=maxCount))},buildParamlist(){let entries=Object.entries(orderListFilter),tmpParamArr=[],tmpParam;for(let a=0;a<entries.length;a++)""!=entries[a][1]&&tmpParamArr.push(entries[a].join("="));return tmpParamArr.join("&")}},events:{async removeCard(selectedEl){let confirm;if(await App.events.swal("warning","Remove Card?","Are you sure you want to remove this credit card?","Remove",!0,"icon-trash")){if(selectedEl.dataset.id){let response=await StripeModel.creditcard.removeCreditCard(selectedEl.dataset.id);response.state&&response.data.items}selectedEl.parentNode.remove(),App.events.notyf("success","Credit card has been removed"),UserProfileScript.methods.checkCardCount()}},tablePaginationHandler(event){orderListFilter.page=event.detail.pageNumber,orderListFilter.per_page=event.detail.pageSize;let paramStr=UserProfileScript.methods.buildParamlist(),urlStr=pageBaseUrl+"?"+paramStr;window.location.href=urlStr}},init:{initEventListener(){addCardBtn&&addCardBtn.forEach(btn=>btn.addEventListener("insClick",()=>cardModal.open())),this.initCardsEventListener()},initCardsEventListener(){let iterations=5,setStateInterval=setInterval(()=>{let cards=Array.from(document.getElementsByTagName("ins-credit-card"));cards?(cards.forEach(element=>{element.addEventListener("insClick",()=>{StripeElement.events.selectCard(element)}),element.addEventListener("insClose",()=>{UserProfileScript.events.removeCard(element)})}),clearInterval(setStateInterval)):(iterations++,iterations>5&&clearInterval(setStateInterval))},300)},initOrderListing(){orderListTable&&(UserProfileScript.methods.initBaseURL(),UserProfileScript.methods.initOrderFilterValues(),UserProfileScript.methods.initOrderTableContents(),orderListTable.addEventListener("insPaginationChange",UserProfileScript.events.tablePaginationHandler))}}};setTimeout(()=>{UserProfileScript.init.initEventListener(),UserProfileScript.init.initOrderListing()},200);